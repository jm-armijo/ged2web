class Translator
    def initialize(language)
        @language = language
    end

    def translate(tag)
        if language_map.key?(tag.upcase.to_sym)
            return language_map[tag.upcase.to_sym]
        else
            return tag
        end
    end

private

    def language_map
        # check language to rreturn correct map.
        # Ex: if @language == 'en' return @english

        # For now, only english is supported.
        return english
    end

    def english
        return {
            ABBR:    'abbreviation',
            ABT:     'about',
            ADDR:    'address',
            ADOP:    'adoption',
            ADR1:    'address1',
            ADR2:    'address2',
            AFN:     'afn',
            AFT:     'after',
            AGE:     'age',
            AGNC:    'agency',
            ALIA:    'alias',
            ANCE:    'ancestors',
            ANCI:    'ances_interest',
            AND:     'and',
            ANUL:    'annulment',
            ASSO:    'associates',
            AUTH:    'author',
            BAPL:    'baptism-lds',
            BAPM:    'baptism',
            BARM:    'bar_mitzvah',
            BASM:    'bas_mitzvah',
            BEF:     'before',
            BET:     'between',
            BIRT:    'birth',
            BLES:    'blessing',
            BURI:    'burial',
            CAL:     'calculated',
            CALN:    'call_number',
            CAST:    'caste',
            CAUS:    'cause',
            CENS:    'census',
            CHAN:    'change',
            CHAR:    'character',
            CHIL:    'child',
            CHRA:    'adult_christening',
            CHR:     'christening',
            CITY:    'city',
            CONC:    'concatenation',
            CONF:    'confirmation',
            CONL:    'confirmation_lds',
            CONT:    'continued',
            COPR:    'copyright',
            CORP:    'corporate',
            CREM:    'cremation',
            CTRY:    'country',
            DATA:    'data',
            DATE:    'date',
            DEAT:    'death',
            DESC:    'descendants',
            DESI:    'descendant_int',
            DEST:    'destination',
            DIV:     'divorce',
            DIVF:    'divorce_filed',
            DSCR:    'phy_description',
            EDUC:    'education',
            EMAI:    'email',
            EMIG:    'emigration',
            ENDL:    'endowment',
            ENGA:    'engagement',
            EVEN:    'event',
            EST:     'estimated',
            FACT:    'fact',
            FAMC:    'family_child',
            FAM:     'family',
            FAMF:    'family_file',
            FAMS:    'family_spouse',
            FATHER:  'father',
            FAX:     'facimilie',
            FCOM:    'first_communion',
            F:       'female',
            FILE:    'file',
            FONE:    'phonetic',
            FORM:    'format',
            GEDC:    'gedcom',
            GIVN:    'given_name',
            GRAD:    'graduation',
            HEAD:    'header',
            HUSB:    'husband',
            IDNO:    'ident_number',
            IMMI:    'immigration',
            INDI:    'individual',
            LANG:    'language',
            LATI:    'latitude',
            LONG:    'longitude',
            MAP:     'map',
            MARB:    'marriage_bann',
            MARC:    'marr_contract',
            MARL:    'marr_license',
            MARR:    'marriage',
            MARS:    'marr_settlement',
            MEDI:    'media',
            M:       'male',
            MOTHER:  'mother',
            NAME:    'name',
            NATI:    'nationality',
            NATU:    'naturalization',
            NCHI:    'children_count',
            NICK:    'nickname',
            NMR:     'marriage_count',
            NOTE:    'note',
            NPFX:    'name_prefix',
            NSFX:    'name_suffix',
            OBJE:    'object',
            OCCU:    'occupation',
            ORDI:    'ordinance',
            ORDN:    'ordination',
            PAGE:    'page',
            PEDI:    'pedigree',
            PHON:    'phone',
            PLAC:    'place',
            POST:    'postal_code',
            PROB:    'probate',
            PROP:    'property',
            PUBL:    'publication',
            QUAY:    'quality_of_data',
            REFN:    'reference',
            RELA:    'relationship',
            RELI:    'religion',
            REPO:    'repository',
            RESI:    'residence',
            RESN:    'restriction',
            RETI:    'retirement',
            RFN:     'rec_file_number',
            RIN:     'rec_id_number',
            ROLE:    'role',
            ROMN:    'romanized',
            SEX:     'gender',
            SLGC:    'sealing_child',
            SLGS:    'sealing_spouse',
            SOURCES: 'sources',
            SOUR:    'source',
            SPFX:    'surn_prefix',
            SSN:     'soc_sec_number',
            STAE:    'state',
            STAT:    'status',
            SUBM:    'submitter',
            SUBN:    'submission',
            SURN:    'surname',
            TEMP:    'temple',
            TEXT:    'text',
            TIME:    'time',
            TITL:    'title',
            TRLR:    'trailer',
            TYPE:    'type',
            VERS:    'version',
            WIFE:    'wife',
            WILL:    'will'
        }
    end
end
